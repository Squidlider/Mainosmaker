{"version":3,"sources":["Components/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","initialState","toptext","fontsize","fontsize2","bottomtext","isTopDragging","isBottomDragging","topY","topX","bottomX","bottomY","ovhY","ovhX","MainPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","objectSpread","currentImage","modalIsOpen","currentImagebase64","toggle","changeText","event","defineProperty","currentTarget","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","_this2","newHeight","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","textStyle2","react_default","className","reactstrap_es","map","key","style","cursor","alt","onClick","role","isOpen","id","ref","el","xmlns","xmlnsXlink","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","ovh","for","placeholder","onChange","defaultValue","React","Component","App","Components_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e4057f0.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  Label,\n  NavbarBrand\n} from \"reactstrap\";\n\nconst photos = [{ src: \"images/pohja.png\" }];\n\nconst initialState = {\n  toptext: \"\",\n  fontsize: 120,\n  fontsize2: 50,\n  bottomtext: \"\",\n  isTopDragging: false,\n  isBottomDragging: false,\n  topY: \"40%\",\n  topX: \"50%\",\n  bottomX: \"50%\",\n  bottomY: \"85%\",\n  ovhY: \"95%\",\n  ovhX: \"50%\"\n};\n\nclass MainPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentImage: 0,\n      modalIsOpen: false,\n      currentImagebase64: null,\n      ...initialState\n    };\n  }\n\n  openImage = index => {\n    const image = photos[index];\n    const base_image = new Image();\n    base_image.src = image.src;\n    const base64 = this.getBase64Image(base_image);\n    this.setState(prevState => ({\n      currentImage: index,\n      modalIsOpen: !prevState.modalIsOpen,\n      currentImagebase64: base64,\n      ...initialState\n    }));\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modalIsOpen: !prevState.modalIsOpen\n    }));\n  };\n\n  changeText = event => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value\n    });\n  };\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect();\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top;\n    let stateObj = {};\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`\n      };\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`\n      };\n    }\n    return stateObj;\n  };\n\n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type);\n    document.addEventListener(\"mousemove\", event =>\n      this.handleMouseMove(event, type)\n    );\n    this.setState({\n      ...stateObj\n    });\n  };\n\n  handleMouseMove = (e, type) => {\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\n      let stateObj = {};\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type);\n      } else if (type === \"top\" && this.state.isTopDragging) {\n        stateObj = this.getStateObj(e, type);\n      }\n      this.setState({\n        ...stateObj\n      });\n    }\n  };\n\n  handleMouseUp = event => {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false\n    });\n  };\n\n  convertSvgToImage = () => {\n    const svg = this.svgRef;\n    let svgData = new XMLSerializer().serializeToString(svg);\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n    const img = document.createElement(\"img\");\n    img.setAttribute(\n      \"src\",\n      \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData)))\n    );\n    img.onload = function() {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"mainos.png\";\n      a.href = canvasdata;\n      document.body.appendChild(a);\n      a.click();\n    };\n  };\n\n  getBase64Image(img) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    var dataURL = canvas.toDataURL(\"image/png\");\n    return dataURL;\n  }\n\n  render() {\n    let fontsize = this.state.fontsize;\n    let fontsize2 = this.state.fontsize2;\n    const image = photos[this.state.currentImage];\n    const base_image = new Image();\n    base_image.src = image.src;\n    var wrh = base_image.width / base_image.height;\n    var newWidth = 600;\n    var newHeight = newWidth / wrh;\n    const textStyle = {\n      fontFamily: \"Luckiest Guy\",\n      fontSize: `${fontsize}px`,\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    };\n\n    const textStyle2 = {\n      fontFamily: \"Luckiest Guy\",\n      fontSize: `${fontsize2}px`,\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    };\n\n    const textStyle3 = {\n      fontFamily: \"Luckiest Guy\",\n      fontSize: \"50px\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    };\n\n    return (\n      <div>\n        <div className=\"main-content\">\n          <div className=\"sidebar\">\n            <NavbarBrand href=\"/\">Salpakirja</NavbarBrand>\n            <p>Valitse haluamasi mainospohja oikealta</p>\n          </div>\n          <div className=\"content\">\n            {photos.map((image, index) => (\n              <div className=\"image-holder\" key={image.src}>\n                <span className=\"caption\">Salpakirja</span>\n                <img\n                  style={{\n                    width: \"100%\",\n                    cursor: \"pointer\",\n                    height: \"100%\"\n                  }}\n                  alt={index}\n                  src={image.src}\n                  onClick={() => this.openImage(index)}\n                  role=\"presentation\"\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\n          <ModalHeader toggle={this.toggle}>Make</ModalHeader>\n          <ModalBody>\n            <svg\n              width={newWidth}\n              id=\"svg_ref\"\n              height={newHeight}\n              ref={el => {\n                this.svgRef = el;\n              }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <image\n                ref={el => {\n                  this.imageRef = el;\n                }}\n                xlinkHref={this.state.currentImagebase64}\n                height={newHeight}\n                width={newWidth}\n              />\n              <text\n                style={{\n                  ...textStyle2,\n                  zIndex: this.state.isTopDragging ? 4 : 1\n                }}\n                x={this.state.topX}\n                y={this.state.topY}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                onMouseDown={event => this.handleMouseDown(event, \"top\")}\n                onMouseUp={event => this.handleMouseUp(event, \"top\")}\n              >\n                {this.state.toptext}\n              </text>\n              <text\n                style={textStyle}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                x={this.state.bottomX}\n                y={this.state.bottomY}\n                onMouseDown={event => this.handleMouseDown(event, \"bottom\")}\n                onMouseUp={event => this.handleMouseUp(event, \"bottom\")}\n              >\n                {this.state.bottomtext}\n              </text>\n              <text\n                style={textStyle3}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                x={this.state.ovhX}\n                y={this.state.ovhY}\n                onMouseDown={event => this.handleMouseDown(event, \"bottom\")}\n                onMouseUp={event => this.handleMouseUp(event, \"bottom\")}\n              >\n                {this.state.ovh}\n              </text>\n            </svg>\n            <div className=\"meme-form\">\n              <FormGroup>\n                <Label for=\"toptext\">Kirjan nimi</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"toptext\"\n                  id=\"toptext\"\n                  placeholder=\"Metsästä kuuluu hekotusta\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"bottomtext\">Alennettu Hinta</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"bottomtext\"\n                  id=\"bottomtext\"\n                  placeholder=\"20€\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"ovh\">OVH. hinta</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"ovh\"\n                  id=\"ovh\"\n                  defaultValue=\"ovh.\"\n                  placeholder=\"29,90€\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"fontsize\">Fontin koko / nimi</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"number\"\n                  defaultValue=\"50\"\n                  name=\"fontsize2\"\n                  id=\"fontsize2\"\n                  placeholder=\"50\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"fontsize2\">Fontin koko / hinta</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"number\"\n                  name=\"fontsize\"\n                  id=\"fontsize\"\n                  defaultValue=\"120\"\n                  placeholder=\"50\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <button\n                onClick={() => this.convertSvgToImage()}\n                className=\"btn btn-primary\"\n              >\n                Lataa mainos\n              </button>\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\r\nimport MainPage from './Components/MainPage';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MainPage />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}